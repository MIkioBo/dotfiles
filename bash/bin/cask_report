#!/usr/bin/env ruby
# Dependencies: tail, head, grep, cat, git, ansifilter

require 'awesome_print'
require 'colorize'

def report(type)
  latest_sha_file = "#{Dir.home}/.homebrew-#{type}-latest-sha"
  cask_repo = "/usr/local/Library/Taps/caskroom/homebrew-#{type}"
  updated = []
  added   = []
  removed = []

  Dir.chdir cask_repo

  if File.exist?(latest_sha_file)
    old_sha = File.read(latest_sha_file).strip
  else
    old_sha = `git log | head -20 | /usr/bin/tail -r | head -1 | ansifilter`.scan(/([a-z0-9]{7})\s.+/)[0][0]
  end
  latest_sha = `git log | head -1 | ansifilter`.scan(/([a-z0-9]{7})\s.+/)[0][0]
  File.open(latest_sha_file, 'w') { |file| file.write(latest_sha) }

  installed_casks = `brew cask ls`.split("\n")
  changes = `git diff --name-status #{old_sha} | grep Casks/ | ansifilter`.split("\n")
  apps = changes.map do |c|
    status, path = c.split("\t")
    app = path.scan(%r{^Casks/(.+)\.rb$}).first.first
    { status: status, name: app }
  end

  apps.each do |a|
    if a[:status] == 'D'
      removed << a[:name].colorize(:light_blue)
    else
      h = `cat Casks/#{a[:name]}.rb | grep -E '^\s+homepage'`
      homepage = h.empty? ? '' : h.scan(/^\s+homepage\s+["'](.+)["']\s*$/).first.first
      if a[:status] == 'A'
        added << a[:name].colorize(:light_blue) + " [#{homepage.colorize(:light_green)}]"
      elsif a[:status] == 'M'
        version_diff = `git diff 9ec26ad Casks/#{a[:name]}.rb | grep -E '^[+-]\s+version'`
        if version_diff.size > 0
          last_version, current_version = version_diff.split("\n")
          last_version.gsub!(/^[-]  version '(.+)'$/, '\1')
          current_version.gsub!(/^[+]  version '(.+)'$/, '\1')
        end
        updated << a[:name].colorize(:light_blue) + \
          "#{'âœ¨' if installed_casks.include?(a[:name])}" + \
          " [#{homepage.colorize(:light_green)}]" + \
          "#{ " #{last_version} #{"<".colorize(:yellow)} #{current_version}" if version_diff.size > 0}"
      else
        fail ArgumentError "Unkown Status"
      end
    end
  end

  puts "\nðŸ”®  #{type.upcase}".colorize(:magenta)
  puts "#{'UPDATED'.colorize(:light_magenta)}\n#{updated.join("\n")}" unless updated.empty?
  puts "#{'ADDED'.colorize(:light_magenta)}\n#{added.join("\n")}" unless added.empty?
  puts "#{'REMOVED'.colorize(:light_magenta)}\n#{removed.join("\n")}" unless removed.empty?
  puts "OLD SHA: #{old_sha.colorize(:light_magenta)}  NEW SHA: #{latest_sha.colorize(:light_magenta)}"
end

report('cask')
report('fonts')
